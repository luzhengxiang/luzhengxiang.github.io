<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JVM基础2]]></title>
    <url>%2F2019%2F12%2F20%2FJVM%E5%9F%BA%E7%A1%802%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[JVM基础1]]></title>
    <url>%2F2019%2F12%2F19%2FJVM%E5%9F%BA%E7%A1%801%2F</url>
    <content type="text"><![CDATA[1 java jdk 1.81.1 The relation of JDK/JRE/JVMjdk、jre、jvm的关系可以用下图表示 2源码到类文件2.1源码123456789101112class Person&#123; private String name; private int age; private static String address; private final static String hobby=&quot;Programming&quot;; public void say()&#123; System.out.println(&quot;person say...&quot;); &#125; public int calc(int op1,int op2)&#123; return op1+op2; &#125;&#125; 编译: javac Person.java —&gt; Person.class 2.2编译过程Person.java -&gt; 词法分析器 -&gt; tokens流 -&gt; 语法分析器 -&gt; 语法树/抽象语法树 -&gt; 语义分析器 -&gt; 注解抽象语法树 -&gt; 字节码生成器 -&gt; Person.class文件 2.3类文件(Class文件)官网The class File Format :https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html 123cafe babe 0000 0034 0027 0a00 0600 1809 0019 001a 0800 1b0a 001c 001d 0700 1e07 001f 0100 046e 616d 6501 0012 4c6a 6176 612f 6c61 6e67 2f53 7472 696e 673b 0100 0361 6765 0100 0149 0100 0761 6464 7265 ...... magic(魔数):The magic item supplies the magic number identifying the class file format; it has thevalue 0xCAFEBABE . 3类文件到虚拟机(类加载机制)3.1装载(Load)查找和导入class文件 1.通过一个类的全限定名获取定义此类的二进制字节流 2.将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构 3.在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口 3.2链接(Link)3.2.1验证(Verify) 保证被加载类的正确性 文件格式验证 元数据验证 字节码验证 符号引用验证 3.2.2准备（Prepare） 为类的静态变量分配内存，并将其初始化为默认值 3.2.3解析（Resolve） 把类中的符号引用转换为直接引用 3.3初始化（Initialize） 对类的静态变量，静态代码块执行初始化操作 3.4类加载机制图解 使用和卸载不算是类加载过程中的阶段，这里只是为了完整性 4类装载器ClassLoader 在装载(Load)阶段，其中第(1)步:通过类的全限定名获取其定义的二进制字节流，需要借助类装载器完成，顾名思义，就是用来装载Class文件的。(1)通过一个类的全限定名获取定义此类的二进制字节流 4.1分类12341)Bootstrap ClassLoader 负责加载$JAVA_HOME中 jre/lib/rt.jar 里所有的class或 Xbootclassoath选项指定的jar包。由C++实现，不是ClassLoader子类。2)Extension ClassLoader 负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中 jre/lib/*.jar 或 -Djava.ext.dirs指定目录下的jar包。3)App ClassLoader 负责加载classpath中指定的jar包及 Djava.class.path 所指定目录下的类和 jar包。4)Custom ClassLoader 通过java.lang.ClassLoader的子类自定义加载class，属于应用程序根据 自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader。 4.2图解 4.3加载原则检查某个类是否已经加载:顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检查，只要某个Classloader已加载，就视为已加载此类，保证此类只所有ClassLoader加载一次。 加载的顺序:加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。 双亲委派机制 定义:如果一个类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就 成功返回;只有父类加载器无法完成此加载任务时，才自己去加载。优势:Java类随着加载它的类加载器一起具备了一种带有优先级的层次关系。比如，Java中的 Object类，它存放在rt.jar之中,无论哪一个类加载器要加载这个类，最终都是委派给处于模型 最顶端的启动类加载器进行加载，因此Object在各种类加载环境中都是同一个类。如果不采用 双亲委派模型，那么由各个类加载器自己取加载的话，那么系统中会存在多种不同的Object 类。破坏:可以继承ClassLoader类，然后重写其中的loadClass方法，其他方式大家可以自己了解 拓展一下。 5运行时数据区(Run-Time Data Areas) 在装载阶段的第(2),(3)步可以发现有运行时数据，堆，方法区等名词(2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构 (3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口 说白了就是类文件被类装载器装载进来之后，类中的内容(比如变量，常量，方法，对象等这些数 据得要有个去处，也就是要存储起来，存储的位置肯定是在JVM中有对应的空间) 5.1官网概括https://docs.oracle.com/javase/specs/jvms/se8/html/index.html 摘要 1The Java Virtual Machine defines various run-time data areas that are used during execution of a program. Some of these data areas are created on Java Virtual Machine start-up and are destroyed only when the Java Virtual Machine exits. Other data areas are per thread. Per-thread data areas are created when a thread is created and destroyed when the thread exits. 5.2图解 5.3常规理解5.3.1Method Area(方法区)方法区是各个线程共享的内存区域，在虚拟机启动时创建。 用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却又一个别名叫做Non-Heap(非堆)，目 的是与Java堆区分开来。当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。 1234The Java Virtual Machine has a method area that is shared among all Java Virtual Machine threads.The method area is created on virtual machine start-up.Although the method area is logically part of the heap,......If memory in the method area cannot be made available to satisfy an allocation request, the Java Virtual Machine throws an OutOfMemoryError. 此时回看装载阶段的第2步:(2)将这个字节流所代表的静态存储结构转化为方法区的运行时数据 结构 如果这时候把从Class文件到装载的第(1)和(2)步合并起来理解的话，可以画个图 值得说明的 (1)方法区在JDK 8中就是Metaspace，在JDK6或7中就是Perm Space (2)Run-Time Constant PoolClass文件中除了有类的版本、字段、方法、接口等描述 信息外，还有一项信息就是常量池，用于存放编译时期生成的各种字面量和符号引用，这部分内容将在 类加载后进入方法区的运行时常量池中存放。 1Each run-time constant pool is allocated from the Java Virtual Machine&apos;s method area (§2.5.4).s 5.3.2Heap(堆)Java堆是Java虚拟机所管理内存中最大的一块，在虚拟机启动时创建，被所有线程共享。Java对象实例以及数组都在堆上分配。 12The Java Virtual Machine has a heap that is shared among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all class instances and arrays is allocated.The heap is created on virtual machine start-up. 此时回看装载阶段的第3步:(3)在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方 法区中这些数据的访问入口 此时装载(1)(2)(3)的图可以改动一下 5.3.3Java Virtual Machine Stacks(虚拟机栈) 经过上面的分析，类加载机制的装载过程已经完成，后续的链接，初始化也会相应的生效。假如目前的阶段是初始化完成了，后续做啥呢?肯定是Use使用咯，不用的话这样折腾来折腾去 有什么意义?那怎样才能被使用到?换句话说里面内容怎样才能被执行?比如通过主函数main调 用其他方法，这种方式实际上是main线程执行之后调用的方法，即要想使用里面的各种内容，得 要以线程为单位，执行相应的方法才行。那一个线程执行的状态如何维护?一个线程可以执行多少个方法?这样的关系怎么维护呢? 虚拟机栈是一个线程执行的区域，保存着一个线程中方法的调用状态。换句话说，一个Java线程的运行 状态，由一个虚拟机栈来保存，所以虚拟机栈肯定是线程私有的，独有的，随着线程的创建而创建。每一个被线程执行的方法，为该栈中的栈帧，即每个方法对应一个栈帧。 调用一个方法，就会向栈中压入一个栈帧;一个方法调用完成，就会把该栈帧从栈中弹出。 1Each Java Virtual Machine thread has a private Java Virtual Machine stack, created at the same time as the thread. A Java Virtual Machine stack stores frames (§2.6). 画图理解栈和栈帧 5.3.4The pc Register(程序计数器) 我们都知道一个JVM进程中有多个线程在执行，而线程中的内容是否能够拥有执行权，是根据 CPU调度来的。假如线程A正在执行到某个地方，突然失去了CPU的执行权，切换到线程B了，然后当线程A再获 得CPU执行权的时候，怎么能继续执行呢?这就是需要在线程中维护一个变量，记录线程执行到 的位置。 程序计数器占用的内存空间很小，由于Java虚拟机的多线程是通过线程轮流切换，并分配处理器执行时 间的方式来实现的，在任意时刻，一个处理器只会执行一条线程中的指令。因此，为了线程切换后能够 恢复到正确的执行位置，每条线程需要有一个独立的程序计数器(线程私有)。如果线程正在执行Java方法，则计数器记录的是正在执行的虚拟机字节码指令的地址; 如果正在执行的是Native方法，则这个计数器为空。 12The Java Virtual Machine can support many threads of execution at once (JLS §17). Each Java Virtual Machine thread has its own pc (program counter) register. At any point, each Java Virtual Machine thread is executing the code of a single method, namely the current method (§2.6) for that thread. If that method is not native, the pc register contains the address of the Java Virtual Machine instruction currently being executed. If the method currently being executed by the thread is native, the value of the Java Virtual Machine&apos;s pc register is undefined. The Java Virtual Machine&apos;s pc register is wide enough to hold a returnAddress or a native pointer on the specific platform. 5.3.5Native Method Stacks(本地方法栈)如果当前线程执行的方法是Native类型的，这些方法就会在本地方法栈中执行。]]></content>
      <tags>
        <tag>java jvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 基础梳理]]></title>
    <url>%2F2019%2F06%2F17%2Fpython-%E5%9F%BA%E7%A1%80%E6%A2%B3%E7%90%86%2F</url>
    <content type="text"></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习selenium笔记]]></title>
    <url>%2F2019%2F06%2F13%2Fpython%E4%BD%BF%E7%94%A8selenium%E5%81%9A%E7%88%AC%E8%99%AB%2F</url>
    <content type="text"><![CDATA[前言Selenium是一个浏览器自动化操作框架。可以模拟用户操作。这样我们就可以用selenium做很多事情了，测试自动化，爬虫。这里我接触和学习selenium也是使用来作为爬虫。 安装1pip install selenium 同时还需要在你的电脑上安装浏览器驱动。安装你本机浏览器对应版本的浏览器驱动。Chromedriver: http://npm.taobao.org/mirrors/chromedriver/ 具体操作控制浏览器操作的一些方法123456789101112set_window_size() 设置浏览器的大小back() 控制浏览器后退forward() 控制浏览器前进refresh() 刷新当前页面clear() 清除文本send_keys (value) 模拟按键输入click() 单击元素submit() 用于提交表单get_attribute(name) 获取元素属性值is_displayed() 设置该元素是否用户可见size 返回元素的尺寸text 获取元素的文本 鼠标事件12345678ActionChains(driver) 构造ActionChains对象context_click() 执行鼠标悬停操作move_to_element(above) 右击double_click() 双击drag_and_drop() 拖动move_to_element(above) 执行鼠标悬停操作context_click() 用于模拟鼠标右键操作， 在调用时需要指定元素定位perform() 执行所有 ActionChains 中存储的行为，可以理解成是对整个操作的提交动作 键盘事件123456789101112常用键盘操作send_keys(Keys.BACK_SPACE) 删除键（BackSpace）send_keys(Keys.SPACE) 空格键(Space)send_keys(Keys.TAB) 制表键(Tab)send_keys(Keys.ESCAPE) 回退键（Esc）send_keys(Keys.ENTER) 回车键（Enter）组合键盘操作send_keys(Keys.CONTROL,‘a’) 全选（Ctrl+A）send_keys(Keys.CONTROL,‘c’) 复制（Ctrl+C）send_keys(Keys.CONTROL,‘x’) 剪切（Ctrl+X）send_keys(Keys.CONTROL,‘v’) 粘贴（Ctrl+V）send_keys(Keys.F1…Fn) 键盘 F1…Fn 定位一组元素 定位一个元素 定位多个元素 含义 find_element_by_id find_elements_by_id 通过元素id定位 find_element_by_name find_elements_by_name 通过元素name定位 find_element_by_xpath find_elements_by_xpath 通过xpath表达式定位 find_element_by_link_text find_elements_by_link_tex 通过完整超链接定位 find_element_by_partial_link_text find_elements_by_partial_link_text 通过部分链接定位 find_element_by_tag_name find_elements_by_tag_name 通过标签定位 find_element_by_class_name find_elements_by_class_name 通过类名进行定位 find_elements_by_css_selector find_elements_by_css_selector 通过css选择器进行定位 示例代码页面html截图 12345678910111213141516171819202122from selenium import webdriverimport timebrowser = webdriver.Firefox()browser.execute_script('window.scrollTo(0, document.body.scrollHeight)')time.sleep(5)liuyan_list = browser.find_elements_by_xpath('//*[@id="j-comment-section"]/div/div[3]/div/ul[3]/li')#获取用户留言liuyan_content = liuyan_list[0].find_element_by_class_name('shiyongxinde.oh')print(liuyan_content.text)liuyan_shijian = liuyan_list[0].find_element_by_class_name('info-time').find_element_by_tag_name('a').text#获取留言时间print(liuyan_shijian)liuyan_id = liuyan_list[0].find_element_by_class_name('woZanTong').get_attribute('appraiseid')#获取留言idprint(liuyan_id)nick_name = liuyan_list[0].find_element_by_class_name('reply_avatar_userName').text#获取昵称print(nick_name) 多窗口切换在页面操作过程中有时候点击某个链接会弹出新的窗口，这时就需要主机切换到新打开的窗口上进行操作。WebDriver提供了switch_to.window()方法，可以实现在不同的窗口之间切换。 1234current_window_handle 获得当前窗口句柄window_handles 返回所有窗口的句柄到当前会话switch_to.window() 用于切换到相应的窗口，与上一节的switch_to.frame()类似，前者用于不同窗口的切换，后者用于不同表单之间的切换。 调用JavaScript代码虽然WebDriver提供了操作浏览器的前进和后退方法，但对于浏览器滚动条并没有提供相应的操作方法。在这种情况下，就可以借助JavaScript来控制浏览器的滚动条。WebDriver提供了execute_script()方法来执行JavaScript代码。 12直接翻到当前页面的页尾browser.execute_script('window.scrollTo(0, document.body.scrollHeight)') cookie操作12345get_cookies() 获得所有cookie信息get_cookie(name) 返回字典的key为“name”的cookie信息add_cookie(cookie_dict) 添加cookie。“cookie_dict”指字典对象，必须有name 和value 值delete_cookie(name,optionsString) 删除cookie信息。“name”是要删除的cookie的名称，“optionsString”是该cookie的选项，目前支持的选项包括“路径”，“域”delete_all_cookies() 删除所有cookie信息 关闭浏览器123close() 关闭单个窗口quit() 关闭所有窗口 可能遇到的坑页面加载慢因为sulenium是代码控制浏览器操作，代码执行很快，浏览器执行很慢，经常发生代码执行到这里，但是页面资源没有加载完的情况。所以需要 time.sleep(5) 让程序等待几秒钟。 莫名其妙的异常我代码写的很开心，执行一下突然报错。。。就是那种明明上一次启动还正常，可能写了一行注释回来执行就报错了。。。让我不知所措，最后是restart大法好。重启就好了，我没有找到发生的具体原因，目前是出现就重启。。。 123456789/Users/luzhengxiang/anaconda3/envs/my_spider/bin/python /Users/luzhengxiang/PycharmProjects/autoSign/spiders/selenium_test/gome/guomei_selenium.pyTraceback (most recent call last): File "/Users/luzhengxiang/PycharmProjects/autoSign/spiders/selenium_test/gome/guomei_selenium.py", line 10, in &lt;module&gt; browser = webdriver.Chrome(); File "/Users/luzhengxiang/anaconda3/envs/my_spider/lib/python3.7/site-packages/selenium/webdriver/chrome/webdriver.py", line 73, in __init__ self.service.start() File "/Users/luzhengxiang/anaconda3/envs/my_spider/lib/python3.7/site-packages/selenium/webdriver/common/service.py", line 104, in start raise WebDriverException("Can not connect to the Service %s" % self.path)selenium.common.exceptions.WebDriverException: Message: Can not connect to the Service chromedriver 不同浏览器内核可能支持的方法不同我最开始基于firefox写的代码，后面直接替换成了chrome。很多原本正常的方法就报错了。猜测原因就是可能不同浏览器对这个selenium的支持不一样导致的。 参考链接：https://blog.csdn.net/weixin_36279318/article/details/79475388]]></content>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 常用命令]]></title>
    <url>%2F2019%2F06%2F12%2Flinux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[工作中常用的命令记录查询12345678910111213141516171819202122lsof -i:端口号 查看端口被什么进程占用netstat -tunlp 查看端口使用情况。ps -ef|grep xxx 查询xxx的进程使用情况文件中根据关键字搜索Cat filename | grep XXX |grep XXX例如：cat zhang8online3.0.log |grep 50641658625520文件中根据关键字统计行数场景：查询接口调用次数cat localhost_access_log.2018-06-06.txt |grep getverifycode |wc -l例如：cat localhost_access_log.2018-06-07.txt |grep getverifycode |wc -l查询中使用正则匹配场景：查询耗时长的接口。cat zhang8online3.0.log | grep -E "耗时：[0-9]&#123;4,&#125;"df -h 查询 磁盘使用情况 操作命令12345678910111213往文件中写值，覆盖文件内容。在不删除文件的情况下清空文件内容echo "" &gt; ZH8.online.trade.logchmod 777 文件名 文件给权限解压tar包tar -xvf file.tar //解压 tar包tar -xzvf file.tar.gz //解压tar.gztar -xjvf file.tar.bz2 //解压 tar.bz2tar -xZvf file.tar.Z //解压tar.Zunrar e file.rar //解压rarunzip file.zip //解压zip 定时任务1234crontab -helpcrontab -l 查看系统定时任务]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2019%2F06%2F11%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[热烈庆祝拖延症晚期的陆大大终于搭建了自己的个人博客啦看到很多人都有自己的博客，记录生活中的点点滴滴，记录自己的喜怒哀乐，记录学习的新技术，记录工作中踩的坑。弄一个自己的博客玩玩的想法在我心里其实很久了，但是直到今天，都2019年了，我才真的肯花点心思来弄，我的这个拖延症呀，我是真的都佩服我自己。不过有句话怎么说的呢，觉得为时已晚的时候，恰恰是是最早的时候。。。。 自我介绍一下我是90狮子座的沪漂程序猿，喜欢唱，跳，篮球……不对不对不对，跑偏了，哈哈哈。我的主要技术方向是java，但是现在公司业务需要整合了几条业务线，我负责的项目都交接给了别的同事，现在的我挺迷茫的，公司的安排是我们组作为后背力量，准备应对可能出现的其它项目，然后整理公司的数据。参与数据的开发，（个人感觉我真的是在在失业的边缘徘徊。。。）所以我现在是什么都会去涉及一点，nodejs，python，elk，因为接触时间补偿，目前都涉入不深。 2012-9月份 - 2019年6月我还记得我是2012年的9月份来的上海，到现在已经7年了，我的妈呀，时间是真的可怕。我一点也不想承认我已经26岁，已经在脱发和被家人逼婚的路上越走越走越远。每天上班下班的日子其实说不上辛苦，但是真的觉得少了很多激情，我也已经不像以前刚工作那会，有干劲到可以连续上班一个月，天天11，2点下班还乐此不疲，觉得这就是奋斗，这是年轻人应该过的生活。人总是想着自己没有的，然后容易忽略掉自己拥有的东西，很显然我就是这一类人的代表了。总是很容易患得患失。其实都是给作的。 最后当然是总结陈词啦虽然自己挺多不好，但是还是不影响我是一个很阳光的宝藏男孩啦。以后我就要多写文章和技术博客来记录我的学习历程，和知识难点。好记性不如烂博客。然后就是多写文章来记录生活重的点点滴滴啦。]]></content>
      <tags>
        <tag>心情杂记</tag>
      </tags>
  </entry>
</search>
